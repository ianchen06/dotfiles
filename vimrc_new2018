""" Auto Installation

if empty(glob("~/.vim/autoload/plug.vim"))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  auto VimEnter * PlugInstall
endif

if empty(glob("~/.vim/colors/seoul256.vim"))
  silent !curl -fLo ~/.vim/colors/seoul256.vim --create-dirs
        \ https://github.com/junegunn/seoul256.vim/raw/master/colors/seoul256.vim
endif


if !isdirectory($HOME . "/.vim/undodir")
  call mkdir($HOME . "/.vim/undodir", "p")
endif

""" Appearance

syntax on
set number relativenumber
set nowrap

colorscheme seoul256

set cindent            " C style indent, supposely to be smarter and autoindent and smartindent
set expandtab          " Absolutely no tabs in files
set shiftwidth=2       " Number of spaces to use for (auto)indent step
set softtabstop=2      " Number of spaces that <Tab> uses while editing

set laststatus=2
set statusline=%F
set wildmenu
set showcmd

match Delimiter /\d\ze\%(\d\d\%(\d\{3}\)*\)\>/

""" Behaviour modifiers
set noswapfile

set undofile
set undodir=~/.vim/undodir
" set clipboard=unnamed
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set foldmethod=marker
set backspace=indent,eol,start

"  autocmd BufWritePre *.erb,*.scss,*.rb,*.js,*.c,*.py,*.php :%s/\s\+$//e

autocmd InsertEnter * let save_cwd = getcwd() | set autochdir
autocmd InsertLeave * set noautochdir | execute 'cd' fnameescape(save_cwd)

set ignorecase
set incsearch
set smartcase
set scrolloff=10
set hlsearch!

set wildmode=longest,list,full
set completeopt=noselect,menuone,preview      "longest,menuone

" complete settings
set wildmode=longest,list,full
set completeopt=longest,menuone

" Pared with .tmux.conf config for navigation in tmux and vim
" {{{
function! TmuxMove(direction)
  let wnr = winnr()
  silent! execute 'wincmd ' . a:direction
  " If the winnr is still the same after we moved, it is the last pane
  if wnr == winnr()
    call system('tmux select-pane -' . tr(a:direction, 'phjkl', 'lLDUR'))
  end
endfunction

nnoremap <silent> <c-h> :call TmuxMove('h')<cr>
nnoremap <silent> <c-j> :call TmuxMove('j')<cr>
nnoremap <silent> <c-k> :call TmuxMove('k')<cr>
nnoremap <silent> <c-l> :call TmuxMove('l')<cr>
" }}}


" auto highlight current word under cursor
" {{{
set updatetime=10 " Short updatetime so the CursorHold event fires fairly often

function! HighlightWordUnderCursor()
  if getline(".")[col(".")-1] !~# '[[:punct:][:blank:]]' 
    exec 'match' 'Search' '/\V\<'.expand('<cword>').'\>/' 
  else 
    match none 
  endif
endfunction

autocmd! CursorHold,CursorHoldI * call HighlightWordUnderCursor()
" }}}

""" Plugins

call plug#begin('~/.vim/plugged')
filetype plugin indent on

Plug 'scrooloose/nerdtree'                                           " File tree browser
Plug 'jistr/vim-nerdtree-tabs'                                       " NerdTree independent of tabs
Plug 'Xuyuanp/nerdtree-git-plugin'                                   " NerdTree git plugin
Plug 'tpope/vim-commentary'                                          " Comment out blocks
Plug 'Valloric/YouCompleteMe'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'mattn/emmet-vim'
Plug 'tmhedberg/matchit'
Plug 'hashivim/vim-terraform'
Plug 'juliosueiras/vim-terraform-completion'
Plug 'towolf/vim-helm'
Plug 'c9s/vikube.vim'
Plug 'andrewstuart/vim-kubernetes'
Plug 'rking/ag.vim'
Plug 'shime/vim-livedown'
Plug 'w0rp/ale'
Plug 'fatih/vim-go'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'

call plug#end()

" NERDTree
map <C-n> :NERDTreeTabsToggle<CR>
map <C-f> :NERDTreeFind<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let NERDTreeChDirMode=2
let g:NERDTreeDirArrowExpandable = '├'
let g:NERDTreeDirArrowCollapsible = '└'
let g:NERDTreeMapActivateNode = '<tab>'
let g:NERDTreeShowHidden = 1
set mouse=a

" UltiSnips
let g:UltiSnipsExpandTrigger="<c-h>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsSnippetsDir="/Users/ian/.vim/plugged/vim-snippets/snippets"

" YouCompleteMe
let g:ycm_key_list_select_completion = ['<TAB>']
let g:ycm_key_list_previous_completion = ['<S-TAB>']
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_python_binary_path = 'python'

" vim-go
let g:go_fmt_command = "goimports"
let g:go_version_warning = 0

" auto-pairs
let g:AutoPairsMapCh=0 " Map <C-h> to delete brackets, quotes in pair. Default=1
let g:AutoPairsWildClosedPair = ''
let g:AutoPairsFlyMode = 0
let g:AutoPairsMultilineClose = 0
let g:AutoPairsShortcutBackInsert = '<c-b>'
